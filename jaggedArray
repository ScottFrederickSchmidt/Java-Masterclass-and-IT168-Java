package avgTemp;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Scanner;

public class TwoDarray {
	//jagged double array:
	static int[][] jaggedArr;
	
	//double array method:
	private static int data2D[][] ={ {0,0 }, {0,0 }, {0,0 } , {0,0 } , {0,0 }  , {0,0 }, 
			{0,0 }, {0,0 }, {0,0 }  , {0,0 }  , {0,0 }  , {0,0 }  } ;
	
	//single array method:
	private static int avgTemps[]= {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
	private static String months[]= {"Jan", "Feb", "Mar", "April", "May", "June", "July","Aug", "Sept", "Oct", "Nov", "Dec" };

	/**
	 * readFile:
	 * This method will read the temp.txt file with the daily temperatures,
	 * and then calculate the average temperature per month 
	 */
	public static void readFile() {
		try {
			Scanner reader = new Scanner(new File("temps.txt"));
			Path path = Paths.get("temps.txt"); //https://mkyong.com/java/how-to-get-the-total-number-of-lines-of-a-file-in-java/
			long lines=0; 
			try {
				lines = Files.lines(path).count(); //counts lines in temps.txt file
			} catch (IOException e) {
				e.printStackTrace();
			}
				for (int i = 0; i < lines; i++) {
					
					String row = reader.nextLine();
					String[] nums=row.toString().split(",");
					//System.out.println(i + " is the i count which should be row number");
					//System.out.println(row);
					int total=0;
					int count=0;
					for (int j = 0; j < nums.length; j++) {
						int n = Integer.parseInt(nums[j]); //must turn into an int for calculation
						total=total+n;
						count=count+1;
					}
					//SINGLE ARRAY METHOD:
					int avgTemp=total/count;
					avgTemps[i]=avgTemp; 
					//System.out.println("average total: "+avgTemp+ " count: " + count); 
					
					//DOUBLE ARRAY METHOD: 
					data2D[i][0]=i; 
					data2D[i][1]=avgTemp; 
					
					total=0; //reset total back to 0 for next month;
					count=0; //reset count back to 0 for next month;				
				}
			
		} catch (FileNotFoundException e) {
			System.out.println("File not found.");
			e.printStackTrace();
		}
	}
	

	/**
	 * jaggedArr()
	 * This will used a double jagged array method:
	 */
	
	public static int[][] jaggedArr() {
		try {
			Scanner reader = new Scanner(new File("temps.txt"));
			int jaggedArr [] [] = new int [12][];
				for (int i = 0; i < 12; i++) {
					String row = reader.nextLine();
					String[] nums=row.toString().split(",");
					//System.out.println(nums.length +" is row length "+ row + " is the row");
					jaggedArr[i]=new int [nums.length];
					for (int j = 0; j < nums.length; j++) {
						int n = Integer.parseInt(nums[j]); //must turn into an int for calculation
						jaggedArr[i][j]=n;
						//System.out.println(n);
					}
					//System.out.println("---new line: --- month#: "+ i);
				}		
		} catch (FileNotFoundException e) {
			System.out.println("File not found.");
			e.printStackTrace();
		}
		return jaggedArr;
	}

	/**
	 * Display Average Temperatures Using Single Array Method:
	 * @param data[] - array of avg temp;
	 * @param months[] - array of months in index order; 
	 */
	public static void displayAvgTemp(int avgTemp[], String months[] ) {
		System.out.println("------------");
		System.out.println("Single Array Method: ");
		for (int i=0; i<avgTemp.length; i++) {
			System.out.println(months[i]+ " Average: "+avgTemp[i]);
		}
	}
	
	
	/**
	 * Display Average Temperatures Using 2DArray:
	 * @param data[] - array of avg temp;
	 * @param months[] - array of months in index order; 
	 */
	public static void displayAvgTemp(int data2D[][] ) {
		System.out.println("---------------");
		System.out.println("Double Array Method: ");
		for (int i=0; i<12; i++) {
			System.out.println( displayMonth(data2D[i][0])+ " Average Temp: "+data2D[i][1]);
		}
	}
	
	/**
	 * displayJaggedArr:
	 * @param jaggedArr[][] - as a double jagged array
	 */
	public static void displayJaggedArr(int jaggedArr[][] ) {
		System.out.println("---------------");
		System.out.println("Jagged Double Array Method: ");
		int total=0;
		int count=0;
		for (int i=0; i<11; i++) {
			
			for (int j=0; j<28; j++) {
				total=total+jaggedArr[i][j];
				System.out.println(jaggedArr[i][j]);
				count=count+1;
				System.out.println(jaggedArr[i][j]);
			}
		System.out.println( displayMonth(i)+ " Average Temp: "+ total/count);
		total=0; //reset total
		count=0; 
		}
	}
	
	/**
	 * displayMonth Method:
	 * Returns the index number into month as a String
	 * @param num - as an int
	 */
	
	public static String displayMonth(int num) {
		switch(num)
		{
		case 0:
		  return "January";
		case 1:
		  return "Febuary";
		case 2:
		  return "March";
		case 3:
			return "April";
		case 4:
			 return "May";
		case 5:
			 return "June";
		case 6:
			 return "July";
		case 7:
			 return "Aug";
		case 8:
			 return "Sept";
		case 9:
			 return "Oct";
		case 10:
			 return "Nov";
		case 11:
			 return "Dec";
	    default:
		 return "Possible Error";
		}
   }
	
	/**
	 * main String[] args
	 * Driver that will call the functions above 
	 */
	public static void main(String[] args) {
	//readFile();
	//displayAvgTemp(avgTemps, months); //single array method
	//displayAvgTemp(data2D); //double array method
	int[][] jagged=jaggedArr(); //jagged array method
	displayJaggedArr(jagged );
	}
}


//This is the file temps.txt:
//20,25,15,10,25,32,40,45,10,-5,-10,23,33,25,16,19,30,34,48,52,39,33,25,15,10,0,5,16,35,42,48
//38,42,44,45,47,38,35,30,28,32,35,38,41,48,52,54,43,39,30,35,41,45,49,52,55,47,45,40
//45,47,48,53,55,54,57,52,59,60,63,58,52,48,56,52,54,58,42,37,35,32,34,39,45,52,59,62,65,63,67,67
//62,60,58,54,53,49,45,48,53,57,57,49,55,62,66,68,63,72,55,58,53,59,62,65,69,64,61,60,59,61
//65,68,69,72,77,78,75,73,71,68,69,73,79,70,68,65,70,73,72,70,75,69,68,75,79,80,82,84,81,78,79
//82,84,89,92,95,99,101,100,98,96,93,92,89,90,90,94,87,84,82,86,87,90,91,94,92,95,99,94,96,90
//93,95,100,102,99,95,92,87,87,85,88,91,90,93,90,87,88,85,87,90,92,94,95,98,100,101,102,102,99,97,95
//97,98,101,99,98,96,94,92,93,95,94,96,99,92,90,89,87,84,82,80,85,86,84,82,81,84,86,82,84,80,79
//75,77,73,72,74,68,69,71,70,65,67,64,63,60,62,65,66,68,79,71,69,67,64,65,69,72,73,74,70,71
//69,68,65,62,60,59,56,55,58,57,62,61,58,54,53,50,49,46,44,49,52,55,54,50,48,47,46,52,50,49,48
//44,41,40,38,37,34,36,40,42,47,48,50,48,47,45,42,40,48,49,47,46,42,41,38,37,39,41,38,37,35
//36,35,33,37,38,39,40,42,37,36,34,32,30,30,29,28,26,29,30,32,35,36,34,29,27,24,23,21,24,28,26
