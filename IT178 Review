public class Bicycle {
	//Instance Variables:
	String type; // mountain, speed, hybrid, road, dirt
	int wheelSize; //size of the wheel
	boolean assembled; //whether the bike comes assembled
	char gender; //single character- f or m
	
	public Bicycle (String type, int wheelSize, boolean assembled, char gender) { 
		this.type=type;
		this.wheelSize=wheelSize;
		this.assembled=assembled;
		this.gender=gender;
	}
	
	public String getType() {
		return type;
	}
	
	public int getWheelSize() {
		return wheelSize;
	}
	
	public boolean assembled() {
		return assembled;
	}
	
	public char getGender() {
		return gender;
	}
	
	// toString- should be automatically created by Eclipse, 
	public String toString(char gender) {
		String g=Character.toString(gender);
		if (g=="m") {
			return "male"; //gender prints out the full gender, not just the character. 
		} else {
			return "female";
		}
	}
}






public class BicycleInventory {
	// Instance variables:
	private static Bicycle[] data; // Bicycle array that stores each Bicycle in the inventory
	private static int actualSize;// variable that represents the size of the Bicycle array
	public static int SIZE = 100;

	// default constructor that instantiates the array to a size of 100 and sets the
	// variable size to zero:
	public BicycleInventory() {
		data = new Bicycle[SIZE];
		actualSize = 0;
	}

	// this method reads the data from the bicycle.txt file and stores it in the
	// array.
	public void readInventory() {
		try {
			Scanner reader = new Scanner(new File("bicycle.txt"));
			reader.nextLine();
			int counter = 0;
			while (reader.hasNextLine()) 
			{
				String[] info = reader.nextLine().split(" ");
				String type = String.valueOf(info[0]);
				int wheelSize = Integer.parseInt(info[1]);
				boolean assembled = Boolean.parseBoolean(info[2]);
				char g = info[3].charAt(0);
				//System.out.println(" Original data: " + data);
				data[counter++] = new Bicycle(type, wheelSize, assembled, g);
			}
			actualSize = counter;
		} catch (FileNotFoundException e) {
			System.out.println("File not found.");
			e.printStackTrace();
		}
	}
	
	public void displayBikes(Object [] bikeInfo)
	{
		System.out.println("Object length is: "+bikeInfo.length + "Type"+" "+ "WheelSize"+" "+ "Assembled"+" "+ "Gender");
		for (int i=0; i<bikeInfo.length; i++) {
			System.out.println(((Bicycle) bikeInfo[i]).getType() +" "+ data[i].getWheelSize()+" "+ data[i].getAssembled()+" "+data[i].toString(data[i].getGender() ));
		}
	}
	
	public void displayAllBikes()
	{
		System.out.println("Type"+" "+ "WheelSize"+" "+ "Assembled"+" "+ "Gender");
		for(int i=0; i<actualSize; i++)
		{
			System.out.println(data[i].getType() +" "+ data[i].getWheelSize()+" "+ data[i].getAssembled()+" "+data[i].toString(data[i].getGender() ));
		}
	}

//	   getChoices- this method will be overloaded multiple times to accept each of the four parameters, as well as a number. 
//	   It will retrieve a specific number of bikes indicated by the number input.
	public static Object[] getChoices(String type, int wheelSize, boolean assembled, char gender, int amount) {
		Object[] bikes = {};
		int count = 0;
		if (amount < count)
			for (int i = 0; i < actualSize; i++) {
				if (data[i].type == type && data[i].wheelSize == wheelSize && data[i].assembled == assembled
						&& data[i].gender == gender) {
					bikes[count] = data[i];
					count = count + 1;
				}
			}
		return bikes;
	}

	public static Object[] getChoices(char gender, int amount) {
		Object[] bikes = {};
		int count = 0;
		for (int i = 0; i < amount; i++) {
			if (data[i].gender == gender) {
				bikes[count] = data[i];
				count = count + 1;
			}
		}
		return bikes;
	}

	public Object[] getChoices(boolean assembled, int amount) {
		Object[] bikes = {};
		int count = 0;
			for (int i = 0; i < actualSize; i++) {
				if (data[i].assembled = assembled) {
					bikes[count+1] = data[i];
				}
			}
		return bikes;
	}

	public Object[] getChoices(int wheelSize, int amount) {
		Object[] bikes = {};
		int count = 0;
		for (int i = 0; i < amount; i++) {
			if (data[i].wheelSize == wheelSize) {
				bikes[count+1] = data[i];
				}
			}
		return bikes;
	}

	public static Object[] getChoices(String type, int amount) {
		Object[] bikes = {};
		int count = 0;
		for (int i = 0; i < amount; i++) {
			if (data[i].type == type) {
				bikes[count+1] = data[i];
			}
		}
		return bikes;
	}

//	chooseOne- this method will also be overloaded multiple times with the same parameters as getChoices.
//	It will call getChoices with the same parameters. 
//	This method returns a randomly selected bicycle from the list of bicycles provided from getChoices. 
	public Object chooseOne(String type, int wheelSize, boolean assembled, char gender) {
		Object[] bikes = getChoices(type, wheelSize, assembled, gender, data.length);
		Random r = new Random();
		int randInt = r.nextInt(bikes.length);
		return bikes[randInt];
	}

	public Object chooseOne(String type) {
		Object[] bikes = getChoices(type, data.length);
		Random r = new Random();
		int randInt = r.nextInt(bikes.length);
		System.out.printf(" is bike length", randInt, " is random number");
		return bikes[randInt];
	}

	public Object chooseOne(int wheelSize) {
		Object[] bikes = getChoices(wheelSize, data.length);
		Random r = new Random();
		int randInt = r.nextInt(bikes.length);
		return bikes[randInt];
	}

	public Object chooseOne(boolean assembled) {
		Object[] bikes = getChoices(assembled, data.length);
		Random r = new Random();
		int randInt = r.nextInt(bikes.length);
		return bikes[randInt];
	}

	public Object chooseOne(char gender) {
		Object[] bikes = getChoices(gender, data.length);
		Random r = new Random();
		int randInt = r.nextInt(bikes.length);
		return bikes[randInt];
	}

	// get Instant Variables:
	public int getSize() {
		return actualSize;
	}

	public static Bicycle[] getBikeArr() {
		return data;
	}
}







public class BicycleInventory {
	// Instance variables:
	private static Bicycle[] data; // Bicycle array that stores each Bicycle in the inventory
	private static int actualSize;// variable that represents the size of the Bicycle array
	public static int SIZE = 100;

	// default constructor that instantiates the array to a size of 100 and sets the
	// variable size to zero:
	public BicycleInventory() {
		data = new Bicycle[SIZE];
		actualSize = 0;
	}

	// this method reads the data from the bicycle.txt file and stores it in the
	// array.
	public void readInventory() {
		try {
			Scanner reader = new Scanner(new File("bicycle.txt"));
			reader.nextLine();
			int counter = 0;
			while (reader.hasNextLine()) 
			{
				String[] info = reader.nextLine().split(" ");
				String type = String.valueOf(info[0]);
				int wheelSize = Integer.parseInt(info[1]);
				boolean assembled = Boolean.parseBoolean(info[2]);
				char g = info[3].charAt(0);
				//System.out.println(" Original data: " + data);
				data[counter++] = new Bicycle(type, wheelSize, assembled, g);
			}
			actualSize = counter;
		} catch (FileNotFoundException e) {
			System.out.println("File not found.");
			e.printStackTrace();
		}
	}
	
	public void displayBikes(Object [] bikeInfo)
	{
		System.out.println("Object length is: "+bikeInfo.length + "Type"+" "+ "WheelSize"+" "+ "Assembled"+" "+ "Gender");
		for (int i=0; i<bikeInfo.length; i++) {
			System.out.println(((Bicycle) bikeInfo[i]).getType() +" "+ data[i].getWheelSize()+" "+ data[i].getAssembled()+" "+data[i].toString(data[i].getGender() ));
		}
	}
	
	public void displayAllBikes()
	{
		System.out.println("Type"+" "+ "WheelSize"+" "+ "Assembled"+" "+ "Gender");
		for(int i=0; i<actualSize; i++)
		{
			System.out.println(data[i].getType() +" "+ data[i].getWheelSize()+" "+ data[i].getAssembled()+" "+data[i].toString(data[i].getGender() ));
		}
	}

//	   getChoices- this method will be overloaded multiple times to accept each of the four parameters, as well as a number. 
//	   It will retrieve a specific number of bikes indicated by the number input.
	public static Object[] getChoices(String type, int wheelSize, boolean assembled, char gender, int amount) {
		Object[] bikes = {};
		int count = 0;
		if (amount < count)
			for (int i = 0; i < actualSize; i++) {
				if (data[i].type == type && data[i].wheelSize == wheelSize && data[i].assembled == assembled
						&& data[i].gender == gender) {
					bikes[count] = data[i];
					count = count + 1;
				}
			}
		return bikes;
	}

	public static Object[] getChoices(char gender, int amount) {
		Object[] bikes = {};
		int count = 0;
		for (int i = 0; i < amount; i++) {
			if (data[i].gender == gender) {
				bikes[count] = data[i];
				count = count + 1;
			}
		}
		return bikes;
	}

	public Object[] getChoices(boolean assembled, int amount) {
		Object[] bikes = {};
		int count = 0;
			for (int i = 0; i < actualSize; i++) {
				if (data[i].assembled = assembled) {
					bikes[count] = data[i];
					count=count+1;
				}
			}
		return bikes;
	}

	public Object[] getChoices(int wheelSize, int amount) {
		Object[] bikes = {};
		int count = 0;
		for (int i = 0; count < amount; i++) {
			if (data[i].wheelSize == wheelSize) {
				bikes[count] = data[i];
				count=count+1;
				}
			}
		return bikes;
	}

	public static Object[] getChoices(String type, int amount) {
		Object[] bikes = {};
		int count = 0;
		for (int i = 0; count < amount; i++) {
			if (data[i].type == type) {
				bikes[count] = data[i];
				count=count+1;
			}
		}
		return bikes;
	}

//	chooseOne- this method will also be overloaded multiple times with the same parameters as getChoices.
//	It will call getChoices with the same parameters. 
//	This method returns a randomly selected bicycle from the list of bicycles provided from getChoices. 
	public Object chooseOne(String type, int wheelSize, boolean assembled, char gender) {
		Object[] bikes = getChoices(type, wheelSize, assembled, gender, data.length);
		Random r = new Random();
		int randInt = r.nextInt(bikes.length);
		return bikes[randInt];
	}

	public Object chooseOne(String type) {
		Object[] bikes = getChoices(type, data.length);
		Random r = new Random();
		int randInt = r.nextInt(bikes.length);
		System.out.printf(" is bike length", randInt, " is random number");
		return bikes[randInt];
	}

	public Object chooseOne(int wheelSize) {
		Object[] bikes = getChoices(wheelSize, data.length);
		Random r = new Random();
		int randInt = r.nextInt(bikes.length);
		return bikes[randInt];
	}

	public Object chooseOne(boolean assembled) {
		Object[] bikes = getChoices(assembled, data.length);
		Random r = new Random();
		int randInt = r.nextInt(bikes.length);
		return bikes[randInt];
	}

	public Object chooseOne(char gender) {
		Object[] bikes = getChoices(gender, data.length);
		Random r = new Random();
		int randInt = r.nextInt(bikes.length);
		return bikes[randInt];
	}

	// get Instant Variables:
	public int getSize() {
		return actualSize;
	}

	public static Bicycle[] getBikeArr() {
		return data;
	}
}

//bicycle.txt file is below:
Hybrid 14 true m
Mountain 14 true m
Road 16 false m
Speed 16 false f
Hybrid 14 true m
Dirt 16 false m
Mountain 16 false f
Mountain 16 false m
Road 16 false f
Hybrid 16 true f
Speed 16 false m
Hybrid 14 true m
Dirt 14 true f
Mountain 14 true m
Road 14 false f
Hybrid 14 false f
Road 16 true m
Speed 16 true m
Dirt 16 true f
Speed 14 true f
Mountain 14 false m
Hybrid 16 true f
Road 16 false m
Road 14 false m
Dirt 14 false m
