public class Bicycle {
	//Instance Variables:
	String type; // mountain, speed, hybrid, road, dirt
	int wheelSize; //size of the wheel
	boolean assembled; //whether the bike comes assembled
	char gender; //single character- f or m
	
	
	/**
	 * Constructor
	 * 
	 * @param type - as a String
	 * @param wheelSize - as an int
	 * @param assembled - as a boolean
	 * @param gender - as a char
	 */
	public Bicycle (String type, int wheelSize, boolean assembled, char gender) { 
		this.type=type;
		this.wheelSize=wheelSize;
		this.assembled=assembled;
		this.gender=gender;
	}
	
	/**
	 * Gets the type with a return;
	 */
	
	public String getType() {
		return type;
	}
	
	/**
	 * Gets the wheelSize with a return;
	 */
	
	public int getWheelSize() {
		return wheelSize;
	}
	
	/**
	 * Gets the assembled with a return;
	 */
	public boolean getAssembled() {
		return assembled;
	}
	
	/**
	 * Gets the gender as a char with a return;
	 */
	
	public char getGender() {
		return gender;
	}
	
	/**
	 * prints out "female" or "male" depending on the char
	 * @param gender as a char
	 */ 
	public String toString(char gender) {
		String g=Character.toString(gender);
		if (g.equalsIgnoreCase("m") ){
			return "male"; //gender prints out the full gender, not just the character. 
		} else {
			return "female";
		}
	}
}






/**
 * BiycleInventory
 * @author Scott Schmidt
 */
public class BicycleInventory {
	// Instance variables:
	private static Bicycle[] data; // Bicycle array that stores each Bicycle in the inventory
	private static int actualSize;// variable that represents the size of the Bicycle array
	public static int SIZE = 100;
	
	/**
	 * Default Constructor:
	 * 
	 * default constructor that instantiates the array to a size of 100;
	 * and sets the variable size to zero:
	 */
	public BicycleInventory() {
		data = new Bicycle[SIZE];
		actualSize = 0;
	}

	/**
	 * this method reads the data from the bicycle.txt file and stores it in the array
	 */
	
	public void readInventory(){
		try {
			Scanner reader = new Scanner(new File("bicycle.txt"));
			reader.nextLine();
			int counter = 0;
			while (reader.hasNextLine()) 
			{
				String[] info = reader.nextLine().split(" ");
				String type = String.valueOf(info[0]);
				int wheelSize = Integer.parseInt(info[1]);
				boolean assembled = Boolean.parseBoolean(info[2]);
				char g = info[3].charAt(0);
				//System.out.println(" Original data: " + data);
				data[counter++] = new Bicycle(type, wheelSize, assembled, g);
			}
			actualSize = counter;
		} catch (FileNotFoundException e) {
			System.out.println("File not found.");
			e.printStackTrace();
		}
	}
	
	/**
	 * displays a random bike within the object below:
	 * @param bikeInfo - as an object[]
	 */
	
	public void displayRandBike(Object [] bikeInfo)
	{
		System.out.println("Type"+" "+ "WheelSize"+" "+ "Assembled"+" "+ "Gender");
		Random r = new Random();
		int i = r.nextInt(bikeInfo.length);
		System.out.println(((Bicycle) bikeInfo[i]).getType() +" "+ data[i].getWheelSize()+" "+ data[i].getAssembled()+" "+data[i].toString(data[i].getGender() ));
	}
	
	/**
	 * displays all bikes within the object below:
	 * @param bikeInfo - as an object[]
	 */
	
	public void displayBikes(Object [] bikeInfo)
	{
		System.out.println("Type"+" "+ "WheelSize"+" "+ "Assembled"+" "+ "Gender");
		for (int i=0; i<bikeInfo.length; i++) {
			System.out.println(((Bicycle) bikeInfo[i]).getType() +" "+ data[i].getWheelSize()+" "+ data[i].getAssembled()+" "+data[i].toString(data[i].getGender() ));
		}
	}
	
	/**
	 * displays all bikes, has no parameter
	 */
	
	public void displayAllBikes()
	{
		System.out.println("Type"+" "+ "WheelSize"+" "+ "Assembled"+" "+ "Gender");
		for(int i=0; i<actualSize; i++)
		{
			System.out.println(data[i].getType() +" "+ data[i].getWheelSize()+" "+ data[i].getAssembled()+" "+data[i].toString(data[i].getGender() ));
		}
	}

	/**
	 * getChoices- this method will be overloaded multiple times to accept each of the four parameters, as well as a number. 
	 * It will retrieve a specific number of bikes indicated by the number input.
	 * @param type - as a String
	 * @param wheelSize - as an int
	 * @param assembled - as a boolean
	 * @param gender - as a char
	 * @param amount - as an int
	 */

	public static Object[] getChoices(String type, int wheelSize, boolean assembled, char gender, int amount) {
		Bicycle[] bikes= new Bicycle[amount] ;  
		int count = 0;
		for (int i = 0; count < amount; i++) {
				String one=String.valueOf(data[i].getGender());
				String two=String.valueOf(gender);
				if (data[i].type.equalsIgnoreCase(type) && data[i].getWheelSize()==wheelSize && data[i].getAssembled() == assembled
						&& one.equalsIgnoreCase(two) ) {
					bikes[count] = new Bicycle(data[i].getType(), data[i].getWheelSize(), data[i].assembled, data[i].gender);
					//System.out.println((data[i]).getType() +" "+ data[i].getWheelSize()+" "+ data[i].getAssembled()+" "+data[i].toString(data[i].getGender() ));
					count = count + 1;
				}
			}
		return bikes;
	}
	
	/**
	 * getChoices- this method will be overloaded multiple times: 
	 * It will retrieve a specific number of bikes indicated 
	 * @param gender - as a char
	 * @param amount - as an int
	 */

	public Object[] getChoices(char gender, int amount) {
		Bicycle[] bikes= new Bicycle[amount] ;  
		int count = 0;
		for (int i = 0; count < amount; i++) {
			String one=String.valueOf(data[i].getGender());
			String two=String.valueOf(gender);
			if (one.equalsIgnoreCase(two)) {
				bikes[count] = new Bicycle(data[i].getType(), data[i].getWheelSize(), data[i].assembled, data[i].gender);
				//System.out.println((data[i]).getType() +" "+ data[i].getWheelSize()+" "+ data[i].getAssembled()+" "+data[i].toString(data[i].getGender() ));
				count = count + 1;
			}
		}
		return bikes;
	}
	
	/**
	 * getChoices- this method will be overloaded multiple times: 
	 * It will retrieve a specific number of bikes indicated 
	 * @param assembled - as a boolean
	 * @param amount - as an int
	 */

	public Object[] getChoices(boolean assembled, int amount) {
		Bicycle[] bikes= new Bicycle[amount];  
		int count = 0;
		for (int i = 0; count < amount; i++) {
				if (data[i].getAssembled()==assembled)   {
					bikes[count] = new Bicycle(data[i].getType(), data[i].getWheelSize(), data[i].assembled, data[i].gender);
					//System.out.println((data[i]).getType() +" "+ data[i].getWheelSize()+" "+ data[i].getAssembled()+" "+data[i].toString(data[i].getGender() ));
					count = count + 1;
				}
			}
		return bikes;
	}
	
	/**
	 * getChoices- this method will be overloaded multiple times: 
	 * It will retrieve a specific number of bikes indicated 
	 * @param wheelSize - as an int
	 * @param amount - as an int
	 */

	public Object[] getChoices(int wheelSize, int amount) {
		Bicycle[] bikes= new Bicycle[amount];  
		int count = 0;
		for (int i = 0; count < amount; i++) {
			if (data[i].getWheelSize() == wheelSize) {
				bikes[count] = new Bicycle(data[i].getType(), data[i].getWheelSize(), data[i].assembled, data[i].gender);
				//System.out.println((data[i]).getType() +" "+ data[i].getWheelSize()+" "+ data[i].getAssembled()+" "+data[i].toString(data[i].getGender() ));
				count = count + 1;
				}
			}
		return bikes;
	}
	
	/**
	 * getChoices- this method will be overloaded multiple times: 
	 * It will retrieve a specific number of bikes indicated 
	 * @param type - as a String
	 * @param amount - as an int
	 */

	public Object[] getChoices(String type, int amount) {
		Bicycle[] bikes= new Bicycle[amount];  
		int count = 0;
		for (int i = 0; count < amount; i++) {
			if (data[i].getType().equalsIgnoreCase(type) ) {
				bikes[count] = new Bicycle(data[i].getType(), data[i].getWheelSize(), data[i].assembled, data[i].gender);
				//System.out.println((data[i]).getType() +" "+ data[i].getWheelSize()+" "+ data[i].getAssembled()+" "+data[i].toString(data[i].getGender() ));
				count = count + 1;
			}
		}
		return bikes;
	}
	
	/**
	 * chooseOne- this method will also be overloaded multiple times with the same parameters as getChoices.: 
	 * It will call getChoices with the same parameters;
	 * This method returns a randomly selected bicycle from the list of bicycles provided from getChoices.
	 * @param type - as a String
	 * @param wheelSize - as an int
	 * @param gender - as a char
	 * @param amount - as an int
	 */

	public Object[] chooseOne(String type, int wheelSize, boolean assembled, char gender) {
		Object[] bikes = getChoices(type, wheelSize, assembled, gender, 2);
		return bikes;
	}
	
	/**
	 * chooseOne- this method will also be overloaded multiple times with the same parameters as getChoices.: 
	 * It will call getChoices with the same parameters;
	 * This method returns a randomly selected bicycle from the list of bicycles provided from getChoices.
	 * @param type - as a String
	 */

	public Object[] chooseOne(String type) {
		Object[] bikes = getChoices(type, 4);
		return bikes;
	}
	
	/**
	 * chooseOne- this method will also be overloaded multiple times with the same parameters as getChoices.: 
	 * It will call getChoices with the same parameters;
	 * This method returns a randomly selected bicycle from the list of bicycles provided from getChoices.
	 * @param wheelSize - as an int
	 */

	public Object[] chooseOne(int wheelSize) {
		Object[] bikes = getChoices(wheelSize, 10);
		return bikes;
	}
	
	/**
	 * chooseOne- this method will also be overloaded multiple times with the same parameters as getChoices.: 
	 * It will call getChoices with the same parameters;
	 * This method returns a randomly selected bicycle from the list of bicycles provided from getChoices.
	 * @param assembled - as a boolean
	 */

	public Object[] chooseOne(boolean assembled) {
		Object[] bikes = getChoices(assembled, 10);
		return bikes;
	}
	
	/**
	 * chooseOne- this method will also be overloaded multiple times with the same parameters as getChoices.: 
	 * It will call getChoices with the same parameters;
	 * This method returns a randomly selected bicycle from the list of bicycles provided from getChoices.
	 * @param gender - as a char
	 */

	public Object[]  chooseOne(char gender) {
		Object[] bikes = getChoices(gender, 10);
		return bikes;
	}

	// get Instant Variables:
	/**
	 * return actualSize as an int
	 */
	public int getSize() {
		return actualSize;
	}
	
	/**
	 * returns data: an object of arrays that stores the bikes
	 */

	public static Bicycle[] getBikeArr() {
		return data;
	}
}







public class BicycleDriver {
		
	static String [] menuItems= {
			"1- Choose one for me ",
			"2- List inventory by wheelSize ",
			"3- List inventory by type ",
			"4- List inventory by gender ",
			"5- List inventory by assembled ",
			"6- List entire inventory ",
			"7- Quit"
			};
	
	// displays the menu to the screen
		private static void displayMenu()
		{
			System.out.println();
			System.out.println("Menu Options are as follows:");
			for (int i = 0; i < menuItems.length; i++)
			{
				System.out.println("  " + (i + 1) + "  " + menuItems[i]);
			}
			System.out.println();
		}
	
	//determineSearch- this method displays the menu options if the user chooses option 1 from the main menu.
	public static void determineSearch() {
		System.out.println(
				"1- Choose by wheelSize "+
				"2- Choose by type "+
				"3- Choose by gender"+
				"4- Choose by assembled " +
				"5- Choose by all ");
	}

	public static void main(String[] args) {
		Scanner input= new Scanner(System.in);
		BicycleInventory b = new BicycleInventory();
		b.readInventory();
		
		while (true) {
			displayMenu();
			int choice=input.nextInt();
			
			//1- Choose one for me
			if (choice==1) {
				determineSearch();
				int chooseOne=input.nextInt();
				
				if(chooseOne==1) {
					System.out.println("What is the wheel size(14 or 16)? ");
					int wheelSize=input.nextInt();
					Object[] obj=b.chooseOne(wheelSize);
					b.displayRandBike(obj);
				} else if (chooseOne==2) {
					System.out.println("Enter type:");
					String type=input.next();
					Object[] obj=b.chooseOne(type);
					b.displayRandBike(obj);
				} else if (chooseOne==3) {
					System.out.println("Enter gender: m or f:");
					char g=input.next().charAt(0);
					Object[] obj=b.chooseOne(g);
					b.displayRandBike(obj);
				} else if (chooseOne==4) {
					System.out.println("Assembled? true or false");
					boolean assembled=input.nextBoolean();
					Object[] obj=b.chooseOne(assembled);
					b.displayRandBike(obj);
				} else if (chooseOne==5) {
					System.out.println("What is the wheel size(14 or 16)? ");
					int wheelSize=input.nextInt();
					System.out.println("Enter type:");
					String type=input.nextLine();
					System.out.println("Assembled? true or false");
					boolean assembled=input.nextBoolean();
					System.out.println("Enter gender: m or f:");
					char g=input.next().charAt(0);
					Object[] obj=b.chooseOne(type, wheelSize, assembled, g);
					b.displayRandBike(obj);
				}
			}
			
			//2- List inveBintory by wheelSize
			else if (choice==2) 
			{
				System.out.println("What is the wheel size(14 or 16)? ");
				int wheelSize=input.nextInt();
				System.out.println("How many results?");
				int amount=input.nextInt();
				Object[] obj=b.getChoices(wheelSize, amount);
				b.displayBikes(obj);
			}
			
			//3- List inventory by type
			else if (choice==3)
			{
				System.out.println("What is the inventory type? (Dirt, Road, Speed, Mountain) ");
				String type=input.next();
				System.out.println("How many results?");
				int amount=input.nextInt();
				Object[] obj=b.getChoices(type, amount);
				b.displayBikes(obj);
			}
			
			//4- List inventory by gender
			else if (choice==4) 
			{
				System.out.println("What is the gender? Enter m or f");
				char g=input.next().charAt(0);
				System.out.println("How many results?");
				int amount=input.nextInt();
				Object[] obj=b.getChoices(g, amount);
				b.displayBikes(obj);
			}
			
			//5- List inventory by assembled
			else if (choice==5) 
			{
				System.out.println("Is it assembled? Enter true or false");
				boolean assembled=input.nextBoolean();
				System.out.println("How many results?");
				int amount=input.nextInt();
				Object[] obj=b.getChoices(assembled, amount);
				b.displayBikes(obj);
			}
				
			//6- List entire inventory
			else if (choice==6)
			{
				System.out.println("Here is the entire inventory:");
				b.displayAllBikes();
			}
			
			//7- Quit
			else if (choice==7)
			{
				break; 
			}
		}
		input.close();
	}
}



//bicycle.txt file is below:
Hybrid 14 true m
Mountain 14 true m
Road 16 false m
Speed 16 false f
Hybrid 14 true m
Dirt 16 false m
Mountain 16 false f
Mountain 16 false m
Road 16 false f
Hybrid 16 true f
Speed 16 false m
Hybrid 14 true m
Dirt 14 true f
Mountain 14 true m
Road 14 false f
Hybrid 14 false f
Road 16 true m
Speed 16 true m
Dirt 16 true f
Speed 14 true f
Mountain 14 false m
Hybrid 16 true f
Road 16 false m
Road 14 false m
Dirt 14 false m
