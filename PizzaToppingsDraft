public class WalkInCooler {
	/**
	 * Constructor 
	 * A default constructor which will create the array
	 * 	@param;
	 */
	PizzaTopping pizza;
	int numberOfPizzaToppings=0;
	PizzaTopping[] toppings=null;

	WalkInCooler () {
		//A method to populate the PizzaToppings array. This method can be found in the
		//WalkInCoolerFillPizzaToppings.java file attached to this assignment. 
		fillPizzaToppingArray();
	}
	
	/**
	 * accepts a PizzaTopping object and adds it to the end of the array;
	 * 	@param;
	 */
	public void addEnd(PizzaTopping pizza) {
		//PizzaToppings.add(pizza);
	}
	
	/**
	 Method to record using topping on a pizza.
	 Accept a pizza toppping identifier and the number 
	 of pizzas sold and update the correct PizzaTopping object in the Array
	 @param;
	 */
	public void recordPizza() {
		
	}
	
	/** A method to record receipt of ordered pizza toppings. It will accept a pizza topping identifier and the
	 * amount of pizza topping ordered that has been received. This method will update the correct
	 * PizzaTopping object in the array. 
	 */
	public void recordReceipt() {
		
	}
	
	/**
	 * A method to display the complete details of a pizza topping that accepts the pizza topping identifier for
	 * the number to be displayed
	 */
	public void displayDetails() {
		System.out.println();
	}
	public void displayDescription() {
		
	}
	
	/**
	 * A method to display the complete details of all pizza toppings in the array to the screen
	 */
	public void displayToppings () {
		System.out.println("");
	}
	private int pizzaLocation  () {
		return -1;
	}
	
	public void fillPizzaToppingArray() {
		toppings[numberOfPizzaToppings] = new PizzaTopping("M-010-Saus", 100, 50, 5.99, 0, "Meat - Pork Sausage");
		numberOfPizzaToppings++;
		toppings[numberOfPizzaToppings] = new PizzaTopping("M-011-Saus", 100, 50, 5.99, 0, "Meat - Italian Sausage");
		numberOfPizzaToppings++;
		toppings[numberOfPizzaToppings] = new PizzaTopping("M-020-Pepp", 200, 75, 6.99, 0, "Meat - Pepperoni");
		numberOfPizzaToppings++;		
		toppings[numberOfPizzaToppings] = new PizzaTopping("M-030-Chik", 100, 50, 5.99, 0, "Meat - Chicken");		
		numberOfPizzaToppings++;
		toppings[numberOfPizzaToppings] = new PizzaTopping("M-040-Ham", 100, 50, 6.99, 0, "Meat - Ham");		
		numberOfPizzaToppings++;		
		toppings[numberOfPizzaToppings] = new PizzaTopping("V-010-Oliv", 50, 25, 1.99, 0, "Veg - Black Olive");
		numberOfPizzaToppings++;
		toppings[numberOfPizzaToppings] = new PizzaTopping("V-011-Oliv", 50, 25, 1.99, 0, "Veg - Green Olive");
		numberOfPizzaToppings++;		
		toppings[numberOfPizzaToppings] = new PizzaTopping("V-021-GPep", 75, 50, .99, 0, "Veg - Green Pepper");
		numberOfPizzaToppings++;
		toppings[numberOfPizzaToppings] = new PizzaTopping("V-022-BPep", 20, 10, .89, 0, "Veg - Bananna Pepper");
		numberOfPizzaToppings++;
		toppings[numberOfPizzaToppings] = new PizzaTopping("V-030-Mush", 50, 10, 1.33, 0, "Veg - Mushroom");
		numberOfPizzaToppings++;
		toppings[numberOfPizzaToppings] = new PizzaTopping("V-040-Onio", 20, 10, .67, 0, "Veg - Onion");
		numberOfPizzaToppings++;
		toppings[numberOfPizzaToppings] = new PizzaTopping("V-050-Pine", 20, 10, .89, 0, "Veg - Pineapple");
		numberOfPizzaToppings++;
		toppings[numberOfPizzaToppings] = new PizzaTopping("C-010-Ches", 200, 100, 2.89, 0, "Cheese - Provolone Cheese");
		numberOfPizzaToppings++;
		toppings[numberOfPizzaToppings] = new PizzaTopping("C-011-Ches", 300, 100, 3.89, 0, "Cheese - Mozzarella Cheese");
		numberOfPizzaToppings++;		
	}
	
	
	/**
	 *A private helper method the accepts a pizza topping identifier and returns the location of that pizza
      * topping in the array. The method should return -1 if the pizza topping is not found.  
	 */
	private int helper() {
		boolean location = true;
		if (location) {
			return 1;//return location of pizza topping array;
		} else {
			return -1; //not found
		}
	}
}











public class ResturantManager {
	WalkInCooler test; //WalkInCooler Object;
	TextMenu food; //TextMenu Object;
	
	public static void main(String[] args) {	
		Scanner input= new Scanner(System.in);
		System.out.println("1. Add a new pizza topping to the WalkInCooler including the amount on hand and amount on order");
		System.out.println("2. Sell an pizza with a specific topping.");
		System.out.println("3. Receive ordered pizza topping ");
		System.out.println("4. Order pizza topping");
		System.out.println("5. Display pizza topping information ");
		System.out.println("6. Display pizza toppings that need to be reordered ");
		System.out.println("7. Display all WalkInCooler pizza toppings ");
		System.out.println("8. Quit");
		System.out.println("ENTER YOUR CHOICE:");
		int number = input.nextInt();
		if (number == 1) {
			
		} else if (number==2) {
			
		} else if (number==3) {
			
		} else if (number==4) {
			
		} else if (number==5) {
			
		} else if (number==6) {
			
		} else if(number==7) {
			
		} else if (number==8) {
			System.out.println("Program Ended.");
		} else {
			System.out.println("Please enter a number 1 through 8");
		}
		
		input.close();
	}
}








import java.util.*;

/*
 * TextMenu.java
 * Created on Jan 13, 2005
 * By Mary Elaine Califf
 *
 */

/**
 * TextMenu class
 * 
 * @author Mary Elaine Califf
 */
public class TextMenu
{
	String[] menuItems;

	/**
	 * @param menuItems
	 *            An array of Strings that represent the various menu labels.
	 *            The array must be the exact size to hold the number of menu
	 *            items desired.
	 */
	public TextMenu(String[] menuItems)
	{
		this.menuItems = menuItems;
	}

	/**
	 * This method displays the menu and gets a choice from the user. The choice
	 * is validated.
	 * 
	 * @return A number between 1 and the number of menu items, representing the
	 *         user's choice
	 */
	public int getChoice()
	{
		int choice;
		String input;
		Scanner scan = new Scanner(System.in);

		this.displayMenu();
		System.out.print("Please enter your choice(1-" + menuItems.length
				+ "): ");
		input = scan.next();
		choice = this.validateChoice(input);
		while (choice == -1)
		{
			System.out.println("That is not a valid choice. Please try again.");
			System.out.print("Enter a number between 1 and " + menuItems.length
					+ ": ");
			input = scan.next();
			choice = this.validateChoice(input);
		}
		return choice;
	}

	// displays the menu to the screen
	private void displayMenu()
	{
		System.out.println();
		System.out.println();
		for (int i = 0; i < menuItems.length; i++)
		{
			System.out.println("  " + (i + 1) + "  " + menuItems[i]);
		}
		System.out.println();
	}

	// validates the menu choice
	private int validateChoice(String input)
	{
		int choice;
		try
		{
			choice = Integer.parseInt(input);
		}
		catch (NumberFormatException e)
		{
			choice = -1;
		}
		if (choice < 1 || choice > menuItems.length)
		{
			choice = -1;
		}
		return choice;
	}
}
