ackage edu.ilstu;

import java.text.NumberFormat;

public class PizzaTopping {
	int pizzaToppingsRemainder = 30;
	int amountPizzaToppings = 30;

	String toppingIdentifier;
	int amountOnHand;
	int reorderLevel;
	double cost;
	int amountOnOrder;
	String description;

	/**
	 * Constructor: Accepts pizza information with the parameters as the following:
	 * 
	 * @param toppingIdentifier - as a String
	 * @param amountOnHand      - as an int
	 * @param reorderLevel      - as an int
	 * @param cost              - as a double
	 * @param amountOnOrder     - as an int
	 * @param description       - as a string
	 */

	public PizzaTopping(String toppingIdentifier, int amountOnHand, int reorderLevel, double cost, int amountOnOrder,
			String description) {
		this.toppingIdentifier = toppingIdentifier;
		this.amountOnHand = 0;
		this.reorderLevel = reorderLevel;
		this.cost = cost;
		this.amountOnOrder = 0;
		this.description = description;
	}

	/**
	 * Special setter for toppingIdentifier that guarantees the data is always
	 * stored in uppercase. This setter should be called from the constructors.
	 */
	public void setToppingId(String toppingIdentifier) {
		this.toppingIdentifier = toppingIdentifier.toUpperCase();
	}

	/**
	 * gets the topping ID as a string;
	 * 
	 * @return this.toppingIdentifier;
	 */
	public String getToppingIdentifier() {
		return this.toppingIdentifier;
	}

	/**
	 * Sets the amountOnHand;
	 * 
	 * @param int amountOnHand
	 */

	public void setAmountOnHand(int amountOnHand) {
		this.amountOnHand = amountOnHand;
	}

	/**
	 * returns amountOnHand as an int;
	 * 
	 * @return this.amountOnHand;
	 */
	public int getAmountOnHand() {
		return this.amountOnHand;
	}

	/**
	 * sets ReorderLevel as an int;
	 * 
	 * @param int reorderLevel;
	 */

	public void setReorderLevel(int reorderLevel) {
		this.reorderLevel = reorderLevel;
	}

	/**
	 * returns reorderLevel as an int;
	 * 
	 * @return this.reorderLevel
	 */

	public int getReorderLevel() {
		return this.reorderLevel;
	}

	/**
	 * sets cost as a double;
	 * 
	 * @param double cost
	 */
	public void setCost(double cost) {
		this.cost = cost;
	}

	/**
	 * returns cost as a double and currency;
	 * 
	 * @return this.cost
	 */
	public double getCost() {
		return this.cost;
		// NumberFormat fmt = NumberFormat.getCurrencyInstance();
		// return fmt.format(this.cost);
	}

	/**
	 * sets amountOnOrder as an int;
	 * 
	 * @param amountOnOrder
	 */
	public void setAmountOnOrder(int amountOnOrder) {
		this.amountOnOrder = amountOnOrder;
	}

	/**
	 * returns amount as an int;
	 * 
	 * @return this.amountOnOrder
	 */

	public int getAmountOnOrder() {
		return this.amountOnOrder;
	}

	/**
	 * sets description as a string
	 * 
	 * @param description
	 */

	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * returns description as a String
	 * 
	 * @return this.description
	 */

	public String getDescription() {
		return this.description;
	}

	/**
	 * update the amount of pizza toppings on hand
	 * 
	 * @param amtSold
	 */
	public void usePizzaTopping(int amtSold) {
		pizzaToppingsRemainder -= 1;
		// or would one set the setAmountOnHand function minus 1;
	}

	/**
	 * updates the amount of pizza toppings;
	 * 
	 * @param amtOrdered
	 */
	public void orderPizzaToppings(int amtOrdered) {
		amountPizzaToppings -= 1;
	}

	/**
	 * return total cost of pizza toppings
	 * 
	 * @return cost
	 */
	public double getCurrentValueOfPizzaTopping() {
		return cost; // return total cost of pizza toppings
	}

	/**
	 * returns boolean depending on location;
	 * No parameters needed;
	 * @return boolean
	 */

	public boolean needToReorder() {
		if (getAmountOnOrder()>getAmountOnHand()) {
			return true; // if pizza toppings needs to be reordered based on level compared on hand;
		} else {
			return false;
		}
	}

	/**
	 * Prints all the Pizza topping object information:
	 * 
	 * @param
	 */
	public void printData() {
		System.out.println("Pizza topping Identifier: " + getToppingIdentifier());
		System.out.println("Description: " + getDescription());
		System.out.println("Cost: " + getCost());
		System.out.println("Amount Available: ");
		System.out.println("Re-order level: " + needToReorder());
		System.out.println("Amount on order: " + getAmountOnOrder());
		System.out.println("Current value on Hand: " + getCurrentValueOfPizzaTopping());
	}
}









public class WalkInCooler {
	private PizzaTopping[] recordPizza;

	int numberOfPizzaToppings = 0;
	private PizzaTopping[] toppings;
	int pizzaCount = 0;

	/**
	 * Constructor: //A method to populate the PizzaToppings array. This method can
	 * be found in the //WalkInCoolerFillPizzaToppings.java file attached to this
	 * assignment. @param;
	 */
	public WalkInCooler() {
		toppings = new PizzaTopping[30];
	}

	/**
	 * accepts a PizzaTopping object and adds it to the end of the array; @param;
	 */
	public void addEnd(PizzaTopping pizza) {
		// toppings[-1] = new PizzaTopping(PizzaTopping pizza);
		// toppings[-1] = new PizzaTopping(null, numberOfPizzaToppings,
		// numberOfPizzaToppings, numberOfPizzaToppings, numberOfPizzaToppings, null);
		toppings[-1] = new PizzaTopping(pizza.getToppingIdentifier(), pizza.getAmountOnHand(), pizza.getReorderLevel(),
				pizza.getCost(), pizza.getAmountOnOrder(), pizza.getDescription());
	}

	/**
	 * Method to record using topping on a pizza. Accept a pizza toppping identifier
	 * and the number of pizzas sold and update the correct PizzaTopping object in
	 * the Array @param;
	 */
	public void recordPizza(PizzaTopping pizza) {
		pizzaCount = pizzaCount + 1;
	}

	/**
	 * A method to record receipt of ordered pizza toppings. It will accept a pizza
	 * topping identifier and the amount of pizza topping ordered that has been
	 * received. This method will update the correct PizzaTopping object in the
	 * array.
	 */
	public void recordReceipt(PizzaTopping pizza) {
		recordPizza[recordPizza.length+1]= pizza;
	}

	/**
	 * A method to display the complete details of a pizza topping that accepts the
	 * pizza topping identifier for the number to be displayed
	 * 
	 * @param PizzaTopping pizza
	 */
	public void displayDetails(PizzaTopping pizza) {
		System.out.println(pizza);
	}

	/**
	 * Gets the pizza description;
	 * 
	 * @param PizzaTopping pizza
	 */
	public void displayDescription(PizzaTopping pizza) {
		System.out.println(pizza.getDescription());
	}

	/**
	 * A method to display the complete details of all pizza toppings in the array
	 * to the screen
	 */
	public void displayToppings(PizzaTopping pizza) {
		System.out.println(pizza);
	}

	/**
	 * gets the pizza location as a boolean;
	 * 
	 * @return pizzaLocation;
	 */
	private int pizzaLocation() {
		return -1; // false
	}

	public void fillPizzaToppingArray() {
		toppings[numberOfPizzaToppings] = new PizzaTopping("M-010-Saus", 100, 50, 5.99, 0, "Meat - Pork Sausage");
		numberOfPizzaToppings++;
		toppings[numberOfPizzaToppings] = new PizzaTopping("M-011-Saus", 100, 50, 5.99, 0, "Meat - Italian Sausage");
		numberOfPizzaToppings++;
		toppings[numberOfPizzaToppings] = new PizzaTopping("M-020-Pepp", 200, 75, 6.99, 0, "Meat - Pepperoni");
		numberOfPizzaToppings++;
		toppings[numberOfPizzaToppings] = new PizzaTopping("M-030-Chik", 100, 50, 5.99, 0, "Meat - Chicken");
		numberOfPizzaToppings++;
		toppings[numberOfPizzaToppings] = new PizzaTopping("M-040-Ham", 100, 50, 6.99, 0, "Meat - Ham");
		numberOfPizzaToppings++;
		toppings[numberOfPizzaToppings] = new PizzaTopping("V-010-Oliv", 50, 25, 1.99, 0, "Veg - Black Olive");
		numberOfPizzaToppings++;
		toppings[numberOfPizzaToppings] = new PizzaTopping("V-011-Oliv", 50, 25, 1.99, 0, "Veg - Green Olive");
		numberOfPizzaToppings++;
		toppings[numberOfPizzaToppings] = new PizzaTopping("V-021-GPep", 75, 50, .99, 0, "Veg - Green Pepper");
		numberOfPizzaToppings++;
		toppings[numberOfPizzaToppings] = new PizzaTopping("V-022-BPep", 20, 10, .89, 0, "Veg - Bananna Pepper");
		numberOfPizzaToppings++;
		toppings[numberOfPizzaToppings] = new PizzaTopping("V-030-Mush", 50, 10, 1.33, 0, "Veg - Mushroom");
		numberOfPizzaToppings++;
		toppings[numberOfPizzaToppings] = new PizzaTopping("V-040-Onio", 20, 10, .67, 0, "Veg - Onion");
		numberOfPizzaToppings++;
		toppings[numberOfPizzaToppings] = new PizzaTopping("V-050-Pine", 20, 10, .89, 0, "Veg - Pineapple");
		numberOfPizzaToppings++;
		toppings[numberOfPizzaToppings] = new PizzaTopping("C-010-Ches", 200, 100, 2.89, 0,
				"Cheese - Provolone Cheese");
		numberOfPizzaToppings++;
		toppings[numberOfPizzaToppings] = new PizzaTopping("C-011-Ches", 300, 100, 3.89, 0,
				"Cheese - Mozzarella Cheese");
		numberOfPizzaToppings++;
	}

	/**
	 * A private helper method the accepts a pizza topping identifier and returns
	 * the location of that pizza topping in the array. The method should return -1
	 * if the pizza topping is not found.
	 */
	private int helper(PizzaTopping pizza) {
		boolean location = true;
		if (location) {
			return 1;// return location of pizza topping array;
		} else {
			return -1; // not found
		}
	}
}



package edu.ilstu;
import java.util.Scanner;

public class ResturantManager {
	WalkInCooler cooler; // WalkInCooler Object;
	TextMenu menu; // TextMenu Object;
	static PizzaTopping[] toppings = null;
	

	@SuppressWarnings("null")
	
	public ResturantManager() {
		WalkInCooler cooler; // WalkInCooler Object;
		TextMenu menu; // TextMenu Object;
		toppings = new PizzaTopping[30];
	}

	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		System.out.println("1. Add a new pizza topping to the WalkInCooler including the amount on hand and amount on order");
		System.out.println("2. Sell a pizza with a specific topping.");
		System.out.println("3. Receive ordered pizza topping ");
		System.out.println("4. Order pizza topping");
		System.out.println("5. Display pizza topping information ");
		System.out.println("6. Display pizza toppings that need to be reordered ");
		System.out.println("7. Display all WalkInCooler pizza toppings ");
		System.out.println("8. Quit");
		System.out.println("ENTER YOUR CHOICE:");
		int number = input.nextInt();

		if (number == 1) {
			toppings[-1] = new PizzaTopping("V-031-Bacon", 40, 11, 2.33, 0, "Extra - Bacon");
		} else if (number == 2) {
			System.out.println("Sell a new pizza here:");
		} else if (number == 3) {
			System.out.println("Receive ordered pizza");
		} else if (number == 4) {
			System.out.println("Hello. Please order pizza toppings below:");
			String toppingOrder = input.nextLine();
			System.out.println(toppingOrder+" is what you selected.");
		} else if (number == 5) {
			System.out.println(toppings[0]); //topping info is index 0 in object array
		} else if (number == 6) {
			System.out.println("Here are the pizza toppings that need reordered");
		} else if (number == 7) {
			System.out.println(toppings);
		} else if (number == 8) {
			System.out.println("Goodbye. Program Ended.");
		} else {
			System.out.println("Please enter a number 1 through 8");
		}

		input.close();
	}
}







