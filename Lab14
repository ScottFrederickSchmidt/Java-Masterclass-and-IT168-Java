import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

/**
 * Program that works with arrays of integers including sorting and merging
 * sorted arrays
 * 
 * @author Scott Schmidt
 *
 */

public class ArraySorting
{
		
	/**
	 *@param theArray - as an int []
	 *@param intputfileName - as a String
	 */
		
	public static int readArray(int[] theArray, String inputFileName)
	{
		int count=0;
		Scanner input = null;
		try {
			
			// read the contents of the specified file into theArray
			input = new Scanner(new FileInputStream(inputFileName));
	
			while (input.hasNext() ) {
				int temp=input.nextInt();
				theArray[count]=temp;
				count=count+1;
		}
		input.close();
	}
		// you must handle relevant exceptions
	catch (FileNotFoundException e) {
		System.out.println("Could not read file");
		System.exit(1);
	}
		return count; //return array length
	}
	
	/**
	 *@param numValues 0 as an int
	 *@param theArray - as a int []
	 *@param outputFileName -  as a string
	 */
	
	public static void writeArray(int[] theArray, int numValues, String outputFileName)
	{
	try
	{
		FileWriter output = new FileWriter(outputFileName);
		// write the first numValues elements of theArray to the specified file
		for (int i=0; i<numValues; i++) {
			 System.out.println(theArray[i]  +" writing into file "+outputFileName );
			 output.write(theArray[i]+ "\n");
		}
		output.flush();
		output.close();
		// you must handle relevant exceptions
	}
	catch(IOException e1) {
		System.out.println("Nothing at this moment");
}
}
	
	/**
	 *@param theArray - as an int[]
	 *@param numValues - as an int
	 */
	// sort the first numValue elements of theArray using the selection sort
		// algorithm
	public static void selectionSort(int[] theArray, int numValues) {

		for (int j = 0; j < numValues - 1; j++) {

			if (theArray[j] > theArray[j + 1]) {
	
				int temp = theArray[j];
				theArray[j] = theArray[j + 1];
				theArray[j + 1] = temp;

				j = -1;
			}
		}
		return; //or return theArray;
	}


	/**
	 *@param arr1 - as an int []
	 *@param size1 - as an int
	 *@param arr2 - as an int []
	 *@param size2 - as an int
	 *@param array3 - as an int []
	 *@return c.length
	 */
	public static int mergeArrays(int[] arr1, int size1, int[] arr2, int size2, int[] mergedArr)
	{ 
		//double[] data = new double[10]
		
        int c1 = size1 + size2; 
  
        int[] c = new int[c1]; 
  
        for (int i = 0; i < size1; i = i + 1) { 
            c[i] = arr1[i]; 
        } 
  
        for (int i = 0; i < size2; i = i + 1) { 
            c[size1 + i] = arr2[i]; 
        } 
        
        System.out.println("New mergedArr is: ");
        for (int i = 0; i < c1; i = i + 1) { 
            System.out.println(c[i]); 
            //mergedArr=c[i];
        } 
        System.out.println("New mergedArr finished with length: "+c.length);

		return c.length;
	}

	public static void main(String[] args)
	{
		// Test just the reading and writing -- check contents of numbersout.txt
		int[] array1 = new int[100];
		int numElems1 = readArray(array1, "numbers.txt");
		writeArray(array1, numElems1, "numbersout.txt");

		// Test the sorting -- check contents of sortedout.txt
		selectionSort(array1, numElems1);
		writeArray(array1, numElems1, "sortedout.txt");

		// Read second array and test merging -- check contents of mergedout.txt
		int[] array2 = new int[100];
		int numElems2 = readArray(array2, "numbers2.txt");
		int[] array3 = new int[200];int numElems3 = mergeArrays(array1, numElems1, array2, numElems2, array3);
		writeArray(array3, numElems3, "mergedout.txt");
	}






import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;

/**
 * This is a simple bank account class.
 * 
 * @author Scott Schmidt
 * 
 */
public class BankAccount {
	private static final Readable FileTextStream = null;
	private double balance;
	private String name;
	private String acctNum;

	/**
	 * Default constructor
	 */
	public BankAccount() {
		this(0, "", "");
	}

	/**
	 * @param initBal The initial balance of the account
	 * @param owner   The name on the account
	 * @param number  The account number
	 */
	public BankAccount(double initBal, String owner, String number) {
		this.balance = initBal;
		this.name = owner;
		this.acctNum = number;
	}

	/**
	 * Checks to see if balance is sufficient for withdrawal. If so, decrements
	 * balance by amount; if not, prints error message.
	 * 
	 * @param amount to be withdrawn
	 */
	public void withdraw(double amount) {
		if (this.balance <= amount)
			this.balance = this.balance - amount;
		else
			System.out.println("Insufficient funds");
	}

	/**
	 * Adds deposit amount to balance.
	 * 
	 * @param amount to be deposited
	 */
	public void deposit(double amount) {
		this.balance = this.balance + amount;
	}

	/**
	 * Getter for the balance
	 * 
	 * @return the current balance
	 */
	public double getBalance() {
		return this.balance;
	}

	/**
	 * Deducts a $10 fee
	 */
	public void chargeFee() {
		this.balance = this.balance - 10;
	}

	/**
	 * Setter for the name
	 * 
	 * @param newName The new name on the account
	 */
	public void setName(String newName) {
		this.name = newName;
	}
	
	public void setBalance(double balance) {
		this.balance = balance;
	}
	
	public void setAcct(String newAcct) {
		this.acctNum=newAcct;
	}
	
	/**
	 * 	Add a read method that accepts a Scanner parameter and read the data for
	* the BankAccount. The header for that method will be:
	* public void read(Scanner input)
	 * @param acctNum 
	* 
	* @param Scanner input 
	 */

	public void read(Scanner input)
	{
		// double initBal, String owner, String number
		name = input.next();
		this.setName(name);
		System.out.println(name +" NAME Bank Account read method");
		
		//this.setName(name);
		this.acctNum = input.next();
		System.out.println(acctNum+" ACCTNUM Bank Account read method");
		
		this.balance = input.nextDouble();
		System.out.println(balance+" BALANCE Bank Account read method");
	}
		//BankAccount b = new BankAccount(this.balance, this.acctNum, this.name);
		//output.write(b);
	
	
	/**
	 * Add a write method to write data to a PrintWriter object (passed in as a
	 * parameter). The header for that method will be:
	 * public void write(PrintWriter output)
	 */

	public void write(PrintWriter output) 
	{
	 try {
		 output = new PrintWriter(new FileOutputStream("accounts2.txt"));
	 }
	 catch (FileNotFoundException e )
	 {
		 System.out.println("File not found");
	 }
	}
	
	/**
	 * Add a toString method that will produce a String that (when printed) would
	 * look like this:
	 * 
	 * Account holder: Mary Smith
	 * Account number: 1004098
	 * Balance: $100.48
	 */
	
	public String toString() {
		return  " Account holder: " +this.name + " Account number: " + this.acctNum + " Balance " + this.getBalance();
	}
}







/**
 * Tester for toString, read, and write methods of BankAccount
 * 
 * @author Scott Schmidt
 *
 */

public class AccountFileTester
{
	static int count=0;

	public static void main(String[] args)
	{
		// simple toString test
		System.out.println("Testing toString");
		System.out.println("Creating BankAccount with name Meg Booth, acct number 11111111, balance 500.00");
		BankAccount testAcct = new BankAccount(500, "Meg Booth", "11111111");
		System.out.println(testAcct);
		System.out.println();

		try
		{
			// open the input and output files
			Scanner infile = new Scanner(new File("accounts.txt"));
			PrintWriter outfile = new PrintWriter(new FileWriter("accounts2.txt", false));

			// first read one and print the toString
			System.out.println("The first record from the file accounts.txt");
			BankAccount tempAcct = new BankAccount();
			tempAcct.read(infile);
			System.out.println(tempAcct);
			System.out.println();

			// print first to the file
			tempAcct.write(outfile);

			// print testAcct to the file
			testAcct.write(outfile);

			// read the rest of the accounts -- adding 100 to each balance before writing to
			// the accounts2.txt file
			while (infile.hasNext())
			{
				tempAcct.read(infile);
				tempAcct.deposit(100);
				tempAcct.write(outfile);
			}

			while (infile.hasNext())
			{
				tempAcct.read(infile);
				tempAcct.deposit(100);
				tempAcct.write(outfile);
			}

			// print the last account read to the screen
			System.out.println("Last account read (with additional $100): ");
			System.out.println(tempAcct);

			// never forget to close your files
			infile.close();
			outfile.close();

			// Now make sure that the file we wrote can be read correctly
			System.out.println("The contents of the accounts2.txt file");
			infile = new Scanner(new File("accounts2.txt"));
			while (infile.hasNext())
			{
				tempAcct.read(infile);
				System.out.println(tempAcct);
			}
			infile.close();
		}
		catch (IOException e)
		{
			System.err.println("Exception caught: " + e.getMessage());
		}

	}
}
